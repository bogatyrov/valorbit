#!/bin/bash
newCoinSuffix=coin
oldCoinSuffix=coin
scriptName="`basename $0`"
newCoinName=valor

while getopts ":pxiftrhgs:S:y:Y:n:N:" opt; do
  case $opt in
    p) changePorts=1 ;;
    x) xFlag=1 ;;
    i) iFlag=1 ;;
    t) timestampFlag=1 ;;
    r) renameFlag=1 ;;
    s) oldCoinSuffix=$OPTARG ;;
    S) newCoinSuffix=$OPTARG ;;
    y) oldSymbol=$OPTARG ;;
    Y) newSymbol=$OPTARG;;
    n) oldCoinName=$OPTARG ;;
    N) newCoinName=$OPTARG ;;
    f) firewallFlag=1 ;;
    g) genesisFlag=1 ;;
    h) helpFlag=1 ;;
    \?) helpFlag=1 ;;
  esac
done

shift $(($OPTIND-1))


showHelp() {
  printf "$scriptName [options] currentName [newName]
     -p  : perform port changes (prod,test:net and RPC)
  -i : initialize local git repo and add it
     -r : perform coin renaming in source code
     -s : old coin suffix. Default is $oldCoinSuffix
     -s : new coin suffix. Default is $newCoinSuffix
     -t  : perform timestamping : string and unix time
     -y symbol : old coin symbol . e.g. BTC
     -Y symbol : new coin symbol . e.g. VAL
     -n name : old coin name without suffix
     -N name : new coin name without suffix. Default is $newCoinName
     -f : show firewall setup information
     -g : perform genesis setup : merkle and hashes
     -x  : set shell tracing on
     -h : help
"
}
#--------------------------------------------------------
getUpper() { 
  echo ${1}|tr '[[:lower:]]' '[[:upper:]]' 
}

#--------------------------------------------------------
getLower() { 
  echo ${1}|tr '[[:upper:]]' '[[:lower:]]' 
}

#--------------------------------------------------------
getFirstUp() {

inVal=$1
inFirst=`getUpper ${inVal:0:1}`
inRest=`getLower ${inVal:1}`

echo $inFirst$inRest
}


#--------------------------------------------------------
portTxProd=7654
portTxTest=8765

portRPCProd=17654
portRPCTest=18765

coinEpoch=`date -d"2014-07-24" +%s`
coinEpochTest=`date -d"2014-07-24" +%s`

oldCoinSuffixFirstUp=`getFirstUp $oldCoinSuffix`
oldCoinNameLCase=`getLower $oldCoinName`
oldCoinNameUCase=`getUpper $oldCoinName`
oldCoinNamePCase=`getFirstUp $oldCoinName`
oldCoinFullnameUCase=`getUpper $oldCoinName$oldCoinSuffix`
oldCoinFullnameLCase=`getLower $oldCoinName$oldCoinSuffix`
oldCoinFullnamePCase="`getFirstUp $oldCoinName`$oldCoinSuffixFirstUp"
oldCoinFullnameFirstUp="`getFirstUp $oldCoinName$oldCoinSuffix`"

newCoinSuffixFirstUp=`getFirstUp $newCoinSuffix`
newCoinNameUCase=`getUpper $newCoinName`
newCoinNameLCase=`getLower $newCoinName`
newCoinNamePCase="`getFirstUp $newCoinName`"
newCoinFullnameUCase=`getUpper $newCoinName$newCoinSuffix`
newCoinFullnameLCase=`getLower $newCoinName$newCoinSuffix`
newCoinFullnamePCase="`getFirstUp $newCoinName`$newCoinSuffixFirstUp"
newCoinFullnameFirstUp="`getFirstUp $newCoinName`$newCoinSuffix"

export oldCoinFullnameUCase oldCoinFullnameLCase oldCoinFullnamePCase oldCoinFullnameFirstUp oldCoinSuffixFirstUp oldCoinNameLCase oldCoinNameUCase oldCoinNamePCase 
export newCoinFullnameUCase newCoinFullnameLCase newCoinFullnamePCase newCoinFullnameFirstUp newCoinSuffixFirstUp newCoinNameLCase newCoinNameUCase newCoinNamePCase 


coinStringTimestamp="23July2014@ValorCoin.com:http://online.wsj.com/articles/facebook-results-keep-surging-on-mobile-ad-growth-1406146246"
coinStringTimestampTest="July2014@testnet.ValorCoin.com"

newGenesisHashTest=""
blockhashMerkleRootTest="13ac7b8ed4b6d3450aba496e7c146c1c0e50b38850777bc4d76d80c3ad8b76dc"

newGenesisHash=""
blockhashMerkleRoot="13ac7b8ed4b6d3450aba496e7c146c1c0e50b38850777bc4d76d80c3ad8b76dc"


#--------------------------------------------------------
changePortsAndSeed() {

sed -i "/return testnet/s/\? .*/? $portTxTest : $portTxProd;/" src/protocol.h
sed -i "/return GetBoolArg(.-testnet./s/\? .*/? $portRPCTest : $portRPCProd;/" src/bitcoinrpc.cpp

printf "After replacement the ports should be :\n%s\n%s\n" "return testnet /? $portTxTest : $portTxProd;" "/return GetBoolArg(.-testnet: $portRPCTest : $portRPCProd;"
printf "Actual grep results:\n"
egrep "return.*testnet" src/protocol.h src/bitcoinrpc.cpp

# DNS seeds
#static const char *strDNSSeed[][2] = {
#    {"valorcoin.com", "dnsseed.valorcoin.com"},
#    {"valorcoin.net", "dnsseed.valorcoin.net"},
#};
#static const char *strDNSSeed[][2] = {
#    {"novacoin.su", "dnsseed.novacoin.su"},
#    {"novacoin.ru", "dnsseed.novacoin.ru"},
#    {"novaco.in", "dnsseed.novaco.in"},

#sed -i '/strDNSSeed[][/s/{\n/  {"valorcoin.com", "dnsseed.valorcoin.com"},\n  {"valorcoin.net", "dnsseed.valorcoin.net"}\n/' src/net.cpp


}

#--------------------------------------------------------
rename() {
echo $3|sed "s/$1/$2/g"
}
#--------------------------------------------------------
renameCoinInCode() {
echo "Changing $oldCoinFullnameUCase $oldCoinFullnameLCase $oldCoinFullnamePCase $oldCoinFullnameFirstUp"
echo "into $newCoinFullnameUCase $newCoinFullnameLCase $newCoinFullnamePCase $newCoinFullnameFirstUp"

filesPattern=".gitignore doc/README* INSTALL README* src/*.cpp src/*.h src/makefile* COPYING src/qt/forms/*.ui
src/qt/res/*.rc src/qt/*.qrc contrib/debian/examples/bitgem.conf ./share/*.nsi share/pixmaps/*.xpm
*.pro share/*.rc src/qt/*.cpp src/qt/*.h src/qt/forms/*.ui src/qt/locale/bitcoin*.ts
./share/qt/*.sh qmake.sh ./contrib/debian/bin/* ./contrib/debian/manpages/* ./contrib/debian/*
./contrib/gitian-descriptors/* ./contrib/macdeploy/* ./contrib/debian/examples/*
"
files="`ls $filesPattern`"

sed -i -e "s/$oldCoinFullnameUCase/$newCoinFullnameUCase/g" $files
sed -i -e "s/$oldCoinFullnameLCase/$newCoinFullnameLCase/g" $files
sed -i -e "s/$oldCoinFullnamePCase/$newCoinFullnamePCase/g" $files
sed -i -e "s/$oldCoinFullnameFirstUp/$newCoinFullnameFirstUp/g" $files
sed -i -e "s/$oldCoinNameUCase/$newCoinNameUCase/g" $files
sed -i -e "s/$oldCoinNameLCase/$newCoinNameLCase/g" $files

sed -i -e "s/$oldCoinNamePCase/$newCoinNamePCase/g" $files

sed -i -e "s/$oldSymbol/$newSymbol/g" $files

filesPattern="${oldCoinFullnamePCase}-qt.pro src/qt/res/icons/$oldCoinFullnamePCase*   ${oldCoinFullnameLCase}-qt.pro src/qt/res/icons/${oldCoinFullnameLCase}*"

for f in `ls $filesPattern`; do 

echo rename "$oldCoinFullnamePCase" "$newCoinFullnamePCase" "$f"
git mv $f `rename "$oldCoinFullnamePCase" "$newCoinFullnamePCase" "$f"`
echo rename "$oldCoinFullnameLCase" "$newCoinFullnameLCase" "$f"
git mv "$f" `rename "$oldCoinFullnameLCase" "$newCoinFullnameLCase" "$f"`

#newFilename="`echo $f|sed 's/$oldCoinFullnameLCase/$newCoinFullnameLCase/'`"


done

printf "After search and replace we have"
grep -i "$oldCoinFullnameUCase" `find . -type f`
grep -i "$oldCoinName" `find . -type f`
grep -i "$oldSymbol" `find . -type f`


}

#--------------------------------------------------------
timestampCoin() {

#should use the test epoch too
#int64 nChainStartTime = 1371910049;
#const char* pszTimestamp = !fTestNet ? "Prod" : "Testnet";
#const char* pszTimestamp = "CNN March 3, 2014 10:48 EST Ukraine crisis: Why it matters to the world economy.";

files=src/main.cpp
printf "Timestamping new coin withTimestring:%s\nCoinEpoch:%s\n" "$coinStringTimestamp" "$coinEpoch"
sed -i "/int64[[:blank:]]*nChainStartTime[[:blank:]]*=/s/=.*/= $coinEpoch;/" $files
sed -i "/^[[:blank:]]*block.nTime[[:blank:]]*=/s/=.*/= $coinEpoch;/" $files
sed -i "/const.*pszTimestamp.*=/s/=.*/= \"$coinStringTimestamp\" ;/" $files

printf "Actual results\n"
egrep "nChainStartTime.*=" $files
egrep ".nTime.*=" $files
egrep "pszTimestamp.*=" $files

}


#--------------------------------------------------------
replaceHashes() {


#static const uint256 hashGenesisBlockOfficial("0x00000e95eda26ced69bcda5d4794e153c54b2a7edb7752439a7c5d376238c7e0");
#static const uint256 hashGenesisBlockTestNet("0x000074e6ba00a73a1ab0a802b1665107690a23d2b1b2363a83f102aaa78a8708");
#static const uint256 hashBadBlock15553("0x000000000141634a8cd6b9ab39c21447a41eeaf76f5a0fc98bafc2757bb42e3c");

echo "newGenesisHash=$newGenesisHash"
echo "newGenesisHashTest=$newGenesisHashTest"
echo "blockhashMerkleRoot=$blockhashMerkleRoot"
echo "blockhashMerkleRootTest=$blockhashMerkleRootTest"

files="src/main.h src/main.cpp"

# production
sed -i "/uint256 hashGenesisBlock(/s/0x[[:alnum:]]*/0x$newGenesisHash/"  $files
# assert(block.hashMerkleRoot == uint256("0x8957e5e8d2f0e90c42e739ec62fcc5dd21064852da64b6528ebd46567f222169"));
sed -i "/assert(block.hashMerkleRoot *==/s/0x[[:alnum:]]*/0x$blockhashMerkleRootTest/" $files

# testnet
#hashGenesisBlock = uint256("0xc2b4cdf03c86099a0758f1c018d1a10bf05afab436c92b93b42bb88970de9821");
sed -i "/uint256 hashGenesisBlockTestNet/s/0x[[:alnum:]]*/0x$newGenesisHashTest/" $files


printf "ACtual results\n"
egrep "hashGenesisBlock.*0x" $files
egrep "hashMerkleRoot.*0x" $files

}

#--------------------------------------------------------
showFirewallRules() {

echo "Firewall rules (ufw):
ufw allow $portTxProd
ufw allow $portRPCProd
ufw allow $portTxTest
ufw allow $portRPCTest
ufw status
"

}

#--------------------------------------------------------
createLocalGitRepo() {

repoDir=$HOME/scm/repos/${newCoinFullnameLCase}.git
mv $repoDir $repoDir.$$.bak
codeBranch=master
mkdir -p $repoDir
git init --bare "$repoDir"
echo "Initialized bare git repo in $repoDir"
# we are assuming this runs in src, but should make it run from ../src
git remote add local "$repoDir"
echo "Added local repo as a source repo"
git push local $codeBranch
echo "Pushed code to the local repo"
echo "Clone this repo with 
git clone `whoami`@`hostname`:$repoDir"
}

#rename old new fileoldisolder

if [ ! -z "$iFlag" ] ; then createLocalGitRepo ; fi
if [ ! -z "$xFlag" ] ; then set -x trace ;fi
if [ ! -z "$helpFlag" ] ; then showHelp; exit ;fi
if [ ! -z "$changePorts" ] ; then changePortsAndSeed; fi
if [ ! -z "$timestampFlag" ] ; then timestampCoin; fi

if [ ! -z "$renameFlag" ] ; then 
  if [ -z "$oldSymbol" ] ; then
	printf "Please provide old coin symbol"
        exit
  fi
  if [ -z "$newSymbol" ] ; then
	printf "Please provide new coin symbol"
        exit
  fi
  if [ -z "$oldCoinName" ] ; then
	printf "Please provide old coin name without the 'coin' suffix"
        exit
  fi
  if [ -z "$newCoinName" ] ; then
	printf "Please provide new coin name without the 'coin' suffix"
        exit
  fi
  oldSymbol="`getUpper $oldSymbol`"
  newSymbol="`getUpper $newSymbol`"
  renameCoinInCode
fi
if [ ! -z "$genesisFlag" ] ; then replaceHashes; fi
if [ ! -z "$firewallFlag" ] ; then showFirewallRules; fi
